<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = sign(mario.x+0.0001-x)
grav = 0.2
hsp = 0
vsp = 0
hspd = 0

walks = true //Does this enemy move left and right?
falls = true //Is this enemy affected by gravity?
wallthrough = false //Can this enemy go through walls?
edges = false //Does this enemy turn around at edges?

stomped = nothing //What does this enemy become when stomped? False for unstompable.
burned = nothing //What does this enemy become when burned? False for fireproof.
landing = false //What does this enemy become when hitting the ground? False for no change.
bounce = 4 //Does Mario bounce off this enemy?
acc = 0.1
turnto = false //Does this enemy turn around to face Mario?
hurts = true //Does Mario take damage colliding with this enemy?
hurttop = false //Does Mario take damage jumping on this enemy?
projectiledestroy = true //Does this enemy destroy projectiles on contact?
directional = true //Does the sprite flip with its facing?
destroyatdistance = false //Is this enemy destroyed when far away?


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animpause()

prevfacing = facing

if !place_meeting(x,y,block) depth = -1
if place_meeting(x,y,blaster) depth = 1

if global.menu == 0
    {
    //moves -----------------------------------------
    edgeturn()
    fall()
    move()
    if vsp = 0 and place_meeting(x,y+0.1,surface) and landing != false
        {
        instance_destroy()
        instance_create(x,y,landing)
        }
    if hsp == 0 and hspd != 0 and place_meeting(x+facing,y,block)
        {
        facing *= -1
        hsp = hspd
        }
    if hsp &gt; hspd
        {
        hsp -= acc
        if hsp &lt; hspd hsp = hspd
        }
    if hsp &lt; hspd
        {
        hsp += acc
        if hsp &gt; hspd hsp = hspd
        }
        
    //interacts -----------------------------------------
    if facing != sign(mario.x-x) and turnto
        {
        hsp *= -1
        facing *= -1
        }
    
    getstomp = stompcheck()
    
    hurt()
    bouncing()
    stomp()
    }
distancedestroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if directional draw_sprite_ext(sprite_index,image_index,round(x-(facing-1)*(sprite_width-sprite_xoffset)/2),round(y),facing,1,0,c_white,1)
else draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
