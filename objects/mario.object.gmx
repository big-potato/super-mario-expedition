<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
music2 = -1
newroom = 0
image_speed = 0
runframe = 1
timer = 0
inventory = ds_list_create()
inventorysprites = ds_list_create()
inventorysize=4
global.menu = 0
menuselect = 0
itemselect = 0
pipedir = "none"

b_left = vk_left
b_right = vk_right
b_up = vk_up
b_down = vk_down
b_jump = ord('Z')
b_run = ord('X')
b_menu = ord('C')

xbutton = 0

grav = hex(0,0,2,8,0) 
agrav = hex(0,0,2,8,0) 
launchhsp = 0
hsp = 0
vsp = 0
hp = 1

state = "walking"
facing = 1

walkmin = hex(0,0,1,3,0)
walkacc = hex(0,0,0,9,8)
runacc = hex(0,0,0,14,4)
releasedec = hex(0,0,0,13,0)
skiddec = hex(0,0,1,10,0)
walkmax = hex(0,1,9,0,0)
walkmaxland = hex(0,1,9,0,0)
walkmaxwater = hex(0,1,1,0,0)
runmax = hex(0,2,9,0,0)
skidturn = hex(0,0,9,0,0)



hat = noone//hat_regular
shirt = noone//shirt_regular
pants = noone//pants_regular

if !variable_global_exists("coins") global.coins = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NOTHING HAPPENS HERE! SURPRISE!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.menu == 0
    {
    if bbox_top &gt; room_height
        {
        if is_array(roommanager.roomsd)
            {
            gotoroomx = 0.1
            for(i=0;i&lt;array_height_2d(roommanager.roomsd);i++)
                {
                if (roommanager.roomsd[i,1] &gt; gotoroomx or gotoroomx == 0.1) and roommanager.roomsd[i,1] &lt;= x
                    {
                    gotoroom = roommanager.roomsd[i,0]
                    gotoroomx = roommanager.roomsd[i,1]
                    }
                }
            newroom = "down"
            room_goto(gotoroom)
            }
        }
    
    if bbox_bottom &lt; 0
        {
        if is_array(roommanager.roomsu)
            {
            gotoroomx = 0.1
            for(i=0;i&lt;array_height_2d(roommanager.roomsu);i++)
                {
                if (roommanager.roomsu[i,1] &gt; gotoroomx or gotoroomx == 0.1) and roommanager.roomsu[i,1] &lt;= x
                    {
                    gotoroom = roommanager.roomsu[i,0]
                    gotoroomx = roommanager.roomsu[i,1]
                    }
                }
            newroom = "up"
            room_goto(gotoroom)
            }
        }
    
    if bbox_right &lt; 0
        {
        if is_array(roommanager.roomsl)
            {
            gotoroomy = 0.1
            for(i=0;i&lt;array_height_2d(roommanager.roomsl);i++)
                {
                if (roommanager.roomsl[i,1] &gt; gotoroomy or gotoroomy == 0.1) and roommanager.roomsl[i,1] &lt;= y
                    {
                    gotoroom = roommanager.roomsl[i,0]
                    gotoroomy = roommanager.roomsl[i,1]
                    }
                }
            newroom = "left"
            room_goto(gotoroom)
            }
        }
    
    if bbox_left &gt; room_width
        {
        if is_array(roommanager.roomsr)
            {
            gotoroomy = 0.1
            for(i=0;i&lt;array_height_2d(roommanager.roomsr);i++)
                {
                if (roommanager.roomsr[i,1] &gt; gotoroomy or gotoroomy == 0.1) and roommanager.roomsr[i,1] &lt;= y
                    {
                    gotoroom = roommanager.roomsr[i,0]
                    gotoroomy = roommanager.roomsr[i,1]
                    }
                }
            newroom = "right"
            room_goto(gotoroom)
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if newroom != 0
    {
    if newroom == "up"
        {
        y = room_height-16
        x -= gotoroomx
        }
    if newroom == "down"
        {
        y = 0
        x -= gotoroomx
        }
    if newroom == "left"
        {
        x = room_width-16
        y -= gotoroomy
        }
    if newroom == "right"
        {
        x = 0
        y -= gotoroomy
        }
    if audio_get_name(roommanager.music) != audio_get_name(music)
        {
        audio_stop_sound(music)
        music = audio_play_sound(roommanager.music,0,true)
        //audio_stop_sound(music2)
        }
    with camera event_perform(ev_create,0)
    newroom = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !variable_instance_exists(id,"music") music = audio_play_sound(roommanager.music,0,true)
if alarm[0] &gt; 0 and hp &gt; 0 image_alpha = random(1)
else image_alpha = 1

inputs()
vsp2=vsp
depth = -1

xbutton = right-left

if menupress and state != "piping"
    {
    global.menu = global.menu*-1+1
    
    if global.menu track = roommanager.menumusic
    else track = roommanager.music
    switchversion(track)
    }
if hp &lt; 1 global.menu = 1

if global.menu == 0
    {
    swimming = 0
    if place_meeting(x,y-8,water) swimming = 1
    walkmax = walkmaxland
    if swimming walkmax = walkmaxwater
    if !collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+11/10,surface,false,false) and !place_meeting(x,y,pipe) state = "jumping"
    
    if jumppress &amp;&amp; (state != "jumping" or swimming == 1) &amp;&amp; state != "piping"
        {
        audio_play_sound(sfx_jump,0,0)
        state = "jumping"
        launchhsp = abs(hsp)
        vsp = -4
        grav = hex(0,0,6,0,0)
        agrav = hex(0,0,1,14,0)
        if launchhsp &gt;= hex(0,2,5,0,0) 
            {
            vsp = -5
            grav = hex(0,0,9,0,0)
            agrav = hex(0,0,2,8,0) 
            }
            
        if launchhsp &lt; 1
            {
            vsp = -4
            grav = hex(0,0,7,0,0)
            agrav = hex(0,0,2,0,0)
            }
        if swimming
            {
            vsp = -1.5
            }
        vsp -= agrav
        }
        
    
    pipeenter()
    
        
    if state == "jumping"
        {
        hsp2 = hsp
        if xbutton == facing
            {
            if hsp &lt; hex(0,1,9,0,0) hsp += hex(0,0,0,9,8)
            else hsp += hex(0,0,0,14,4)
            }
        if xbutton == -facing
            {
            if hsp &gt;= hex(0,1,9,0,0) hsp -= hex(0,0,0,14,4)
            else 
                {
                if launchhsp &lt; hex(0,1,13,0,0) hsp -= hex(0,0,0,9,8)
                else hsp -= hex(0,0,0,13,0)
                }
            }
        if launchhsp &lt; hex(0,1,9,0,0)
            {
            if hsp &gt; hex(0,1,9,0,0) hsp = hsp2-hsp2%1
            }
        else
            {
            if hsp &gt; hex(0,2,9,0,0) hsp = hsp2-hsp2%1
            }
        if !swimming
            {
            if jump and vsp &lt; 0 vsp += agrav
            else vsp += grav
            }
        else 
            {
            if jump and vsp &lt; 0 vsp += 13/256
            else vsp += 5/128
            }
        if !jumppress &amp;&amp; (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+11/10,surface,false,false)) &amp;&amp; vsp &gt;= 0
            {
            state = "walking"
            if run state = "running"
            }
        }
        
    if state == "walking"
        {
        if !runpress
            {
            if xbutton == 0 hsp -= releasedec
            hsp2 = hsp
            if xbutton == facing hsp += walkacc
            if xbutton == -facing state = "skidding"
            if hsp &lt; 0 hsp = 0 
            if hsp &gt; walkmax hsp = drop_subsub(hsp2)
            }
        else state = "running"
        }
        
    if state == "running"
        {
        if irandom(8) == 0 and hsp &gt; 2 instance_create((bbox_left+bbox_right)/2-facing*4,bbox_bottom,smoke)
        if run timer = 10
        timer --
        if xbutton == -facing state = "skidding"
        if run or timer &gt; 0
            {
            hsp2 = hsp
            if xbutton == facing hsp += runacc
            if xbutton == 0 hsp -= releasedec
            if hsp &lt; 0 hsp = 0
            if hsp &gt; runmax hsp = drop_subsub(hsp2)
            }
        if timer &lt;= 0
            {
            state = "walking"
            if hsp &gt; walkmax hsp = walkmax
            }
        }
    else timer = 0
    
        
    if state == "skidding"
        {
        if irandom(3) == 0 instance_create((bbox_left+bbox_right)/2+facing*4,bbox_bottom,smoke)
        hsp -= skiddec
        if xbutton == facing
            {
            state = "walking"
            if run state = "running"
            }
        else if hsp &lt; skidturn and xbutton != facing
            {
            facing *= -1
            state = "walking"
            if run state = "running"
            }
        if hsp &lt; 0 hsp = 0
        }
    
    if state == "piping"
        {
        depth = 2
        piping()
        }
    else depth = -1
    
    
        
    if vsp &gt; 4.5 vsp = 4
        
    move_x(hsp)
    move_y(vsp)
    
    
    if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top-0.1,bumpblock,true,true) and vsp &lt;= 0
        {
        with collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top-0.1,bumpblock,true,true)
            {
            vsp = -3
            bumping = 1
            }
        vsp = 0.1
        }
    
    
    
    
    
    if downpress
        {
        if place_meeting(x,y,item)
            {
            take = instance_place(x,y,item).id
            takespr = instance_place(x,y,item).sprite_index
            if ds_list_size(inventory) &lt; inventorysize and !variable_instance_exists(take,"nocollect")
                {
                ds_list_add(inventory,take)
                ds_list_add(inventorysprites,takespr)
                take.carried = 1
                audio_play_sound(sfx_item,0,false)
                }
            }
        }
    
    //animation
    
    if state == "skidding" image_index = 5
    if state == "jumping"
        {
        image_index = 6
        runframe = 1
        }
    
    runframe += 0.125
    if state == "running" runframe += 0.125
    if floor(runframe) == 5 runframe = 1
    if state == "walking" or state == "running" 
        {
        image_index = floor(runframe)
        if hsp == 0 image_index = 0
        }
        
        
    if itemselect != noone
        {
        with itemselect
            {
            event_user(0)
            }
        }
    }

if hp &lt; 1
    {
    if dietime == 20
        {
        vsp = -5
        }
    if dietime &gt; 30
        {
        y += vsp
        vsp += 0.3
        }
    if dietime &gt; 100 game_restart()
    dietime ++
    }
else 
    {
    dietime = 0
    if global.menu
        {
        if uppress menuselect --
        if downpress menuselect ++
        if menuselect &lt; 0 menuselect = inventorysize-1
        if menuselect &gt; inventorysize-1 menuselect = 0
        if itemselect != noone
            {
            if runpress
                {
                dropitem()
                audio_play_sound(sfx_item,0,false)
                switchversion(roommanager.music)
                }
            if jumppress
                {
                switchversion(roommanager.music)
                with itemselect
                    {
                    event_user(1)
                    }
                }
            }
        while menuselect &gt;= ds_list_size(inventory) and menuselect &gt; 0 menuselect--
        }
    }

if ds_list_size(inventory) &gt; menuselect
    {
    itemselect = ds_list_find_value(inventory,menuselect)
    }
else itemselect = noone


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.font)
draw_set_colour(c_white)
//draw_text(32, 32, "FPS = " + string(round(fps_real))) 
for(i=1;i&lt;=inventorysize;i++)
    {
    draw_rectangle_colour((view_wview[0]-30)*2, (32*i-14)*2, (view_wview[0]-3)*2, (13+32*i)*2, c_black, c_black, c_black, c_black, false)
    if menuselect == i-1
        {
        draw_sprite(spr_selected,0,(view_wview[0]-30)*2,(32*i-14)*2)
        //draw_rectangle_colour((view_wview[0]-30)*2,(32*i-14)*2, (view_wview[0]-3)*2, (13+32*i)*2, c_white, c_white, c_white, c_white, true)
        //draw_rectangle_colour((view_wview[0]-29)*2,(32*i-13)*2, (view_wview[0]-4)*2, (12+32*i)*2, c_white, c_white, c_white, c_white, true)
        }
    if ds_list_size(inventory) &gt;= i 
        {
        obj = ds_list_find_value(inventorysprites,i-1)
        draw_sprite_ext(obj, 0,(view_wview[0]-32)*2, (32*i-16)*2, 4, 4, 0, c_white,1)
        }
    }
draw_sprite_ext(spr_ui_hp,0,(view_wview[0]-32)*2, (32*i-16)*2, 4, 4, 0, c_white,1)
draw_text_transformed((view_wview[0]-16)*2,(32*i-16)*2,string(hp),4,4,0)
draw_sprite_ext(spr_ui_money,0,(view_wview[0]-32)*2, (32*i)*2, 4, 4, 0, c_white,1)
draw_text_transformed((view_wview[0]-16)*2,(32*i)*2,string(global.coins),4,4,0)
    
if global.menu and hp &gt; 0 draw_text((view_wview[0]-256)*2,(view_hview[0]-16)*2,"Z = use  X = drop  C = equip")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,round(x-(facing-1)*8),round(y),facing,1,0,c_white,image_alpha)
if shirt != noone draw_sprite_ext(shirt,image_index,round(x-(facing-1)*8),round(y),facing,1,0,c_white,image_alpha)
if pants != noone draw_sprite_ext(pants,image_index,round(x-(facing-1)*8),round(y),facing,1,0,c_white,image_alpha)
if hat != noone draw_sprite_ext(hat,image_index,round(x-(facing-1)*8),round(y),facing,1,0,c_white,image_alpha)


//draw_text(x-16,y-24,"hp: " + string(hp))
//draw_text(x-16,y-8,"coins: " + string(global.coins))


//draw menu
//for(i=1;i&lt;=inventorysize;i++)
    {
    //draw_rectangle_colour(view_xview[0] + view_wview[0] - 1 - 29, view_yview[0] + 2 + 32*i - 16, view_xview[0] + view_wview[0] - 1 - 2, view_yview[0] + 29 + 32*i - 16, c_black, c_black, c_black, c_black, false)
    //if menuselect == i-1
        {
        //draw_rectangle_colour(view_xview[0] + view_wview[0] - 1 - 29, view_yview[0] + 2 + 32*i - 16, view_xview[0] + view_wview[0] - 1 - 2, view_yview[0] + 29 + 32*i - 16, c_white, c_white, c_white, c_white, true)
        //draw_rectangle_colour(view_xview[0] + view_wview[0] - 1 - 29+1, view_yview[0] + 2 + 32*i - 16+1, view_xview[0] + view_wview[0] - 1 - 2-1, view_yview[0] + 29 + 32*i - 16-1, c_white, c_white, c_white, c_white, true)
        }
    //if ds_list_size(inventory) &gt;= i 
        {
        //obj = ds_list_find_value(inventorysprites,i-1)
        //draw_sprite_ext(obj, 0,view_xview[0] + view_wview[0] - 32, view_yview[0] + 32*i - 16, 2, 2, 0, c_white,1)
        }
    }
    
//if global.menu and hp &gt; 0 draw_text(view_xview[0] + view_wview[0] - 256,view_yview[0]+view_hview[0]-16,"Z = use  X = drop  C = equip")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
